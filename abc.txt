# Choose the Jenkins base image you want to use (LTS is recommended)
# Make sure this matches the architecture of your host machine (most likely amd64)
FROM jenkins/jenkins:lts-jdk17

# Metadata (Optional but good practice)
LABEL maintainer="Harshit Jain <harshitjain1924@gmail.com>"
LABEL description="Jenkins LTS with Docker CLI installed for DooD setup."

# Switch to root user to install packages
USER root

# Update package lists and install dependencies for adding Docker repo
# Using --no-install-recommends helps keep the image size down
RUN apt-get update && apt-get install -y --no-install-recommends \
       apt-transport-https \
       ca-certificates \
       curl \
       gnupg \
       lsb-release \
       software-properties-common \
       wget && \
# Clean up cache to reduce layer size
    rm -rf /var/lib/apt/lists/*

# Add Docker's official GPG key
RUN install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    chmod a+r /etc/apt/keyrings/docker.gpg

# Set up the Docker stable repository
RUN echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

# Update package lists again after adding the repo and install Docker CLI
RUN apt-get update && apt-get install -y --no-install-recommends \
       docker-ce-cli && \
# Clean up cache again
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Optional: Install other useful tools if needed inside Jenkins container
# RUN apt-get update && apt-get install -y git openssh-client && \
#    rm -rf /var/lib/apt/lists/*

# Switch back to the jenkins user (important for security and correct operation)
USER jenkins

# The base image already defines the ENTRYPOINT/CMD to start Jenkins,
# so we don't need to redefine it here.
